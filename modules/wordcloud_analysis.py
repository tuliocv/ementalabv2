# ============================================================
# ‚òÅÔ∏è WordCloud Analysis ‚Äî Nuvem de Palavras das UCs
# ============================================================
import streamlit as st
from wordcloud import WordCloud, STOPWORDS
import matplotlib.pyplot as plt
import pandas as pd
import re

# ============================================================
# üöÄ Fun√ß√£o Principal
# ============================================================
def run_wordcloud(df: pd.DataFrame, scope_key: str):
    """
    Gera nuvens de palavras espec√≠ficas para colunas curriculares
    (Compet√™ncias, Ementa, Objetivos etc.), com remo√ß√£o de stopwords.
    """

    st.subheader("‚òÅÔ∏è Nuvem de Palavras das Unidades Curriculares")

    # --------------------------------------------------------
    # üß≠ Colunas de interesse espec√≠ficas
    # --------------------------------------------------------
    colunas_alvo = [
        "Compet√™ncias do Perfil do Egresso",
        "Rela√ß√£o compet√™ncia DCN",
        "Ementa (Assuntos que ser√£o abordado)",
        "Objetivo de aprendizagem",
        "Objetos de conhecimento (Conte√∫do program√°tico)",
    ]

    # Filtra colunas que existem no DataFrame
    colunas_existentes = [c for c in colunas_alvo if c in df.columns]

    if not colunas_existentes:
        st.warning("Nenhuma das colunas esperadas foi encontrada na base.")
        st.write("Esperadas:", ", ".join(colunas_alvo))
        return

    # --------------------------------------------------------
    # üßπ Pr√©-processamento textual
    # --------------------------------------------------------
    def limpar_texto(txt):
        txt = str(txt).lower()
        txt = re.sub(r"http\S+|www\S+|https\S+", "", txt)
        txt = re.sub(r"[^a-zA-Z√Ä-√ø0-9\s]", " ", txt)
        txt = re.sub(r"\s+", " ", txt)
        return txt.strip()

    # --------------------------------------------------------
    # üßæ Stopwords em portugu√™s
    # --------------------------------------------------------
    stopwords_pt = set([
        # stopwords b√°sicas
        "de", "da", "do", "das", "dos", "e", "em", "para", "por", "com", "a", "o", "as", "os", 
        "na", "no", "nas", "nos", "um", "uma", "uns", "umas", "que", "como", "se", "ao", "√†",
        "√†s", "aos", "sobre", "entre", "pela", "pelo", "pelas", "pelos", "n√£o", "ser", "estar",
        "ter", "ou", "sua", "seu", "suas", "seus", "mais", "menos", "tamb√©m", "quando", "onde",
        "cada", "outro", "outra", "outros", "outras", "para", "com", "pode", "podem", "atrav√©s",
        "visando", "forma√ß√£o", "capacidade", "habilidade", "compet√™ncia", "conhecimento"
    ]) | STOPWORDS

    # --------------------------------------------------------
    # ‚öôÔ∏è Configura√ß√µes de exibi√ß√£o
    # --------------------------------------------------------
    st.sidebar.markdown("### üé® Configura√ß√µes da Nuvem")
    max_palavras = st.sidebar.slider("M√°ximo de palavras", 50, 500, 200, 50)
    colormap = st.sidebar.selectbox("Esquema de cores", [
        "viridis", "plasma", "inferno", "magma", "cividis",
        "Blues", "Greens", "Oranges", "Purples", "Reds",
        "cool", "hot", "rainbow"
    ], index=0)
    fundo_transp = st.sidebar.checkbox("Fundo transparente", value=False)

    # --------------------------------------------------------
    # ‚òÅÔ∏è Gera√ß√£o das nuvens para cada coluna
    # --------------------------------------------------------
    for col in colunas_existentes:
        st.markdown(f"### üìò {col}")
        df["__texto_limpo__"] = df[col].astype(str).apply(limpar_texto)
        texto_total = " ".join(df["__texto_limpo__"].tolist())

        if not texto_total.strip():
            st.info(f"Nenhum texto v√°lido encontrado na coluna **{col}**.")
            continue

        wc = WordCloud(
            width=1200,
            height=600,
            background_color=None if fundo_transp else "white",
            mode="RGBA" if fundo_transp else "RGB",
            colormap=colormap,
            max_words=max_palavras,
            stopwords=stopwords_pt,
            collocations=False,
            normalize_plurals=True
        ).generate(texto_total)

        fig, ax = plt.subplots(figsize=(12, 6))
        ax.imshow(wc, interpolation="bilinear")
        ax.axis("off")
        st.pyplot(fig)

        # üì¶ Download individual
        buf = wc.to_image()
        st.download_button(
            f"üíæ Baixar imagem ‚Äî {col}",
            data=_image_to_bytes(buf),
            file_name=f"nuvem_{col.replace(' ', '_')}_{scope_key}.png",
            mime="image/png"
        )
        st.markdown("---")

# ============================================================
# üîß Fun√ß√£o auxiliar para converter imagem em bytes
# ============================================================
from io import BytesIO
def _image_to_bytes(img):
    buf = BytesIO()
    img.save(buf, format="PNG")
    buf.seek(0)
    return buf.getvalue()
