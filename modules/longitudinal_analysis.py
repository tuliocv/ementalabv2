# ===============================================================
# üåê EmentaLabv2 ‚Äî Mapa de Conectividade Curricular (v1.0)
# ===============================================================
# - Cria rede de impacto entre UCs via similaridade sem√¢ntica
# - Calcula m√©tricas de centralidade (grau, intermedia√ß√£o, densidade)
# - Identifica UCs estruturantes, perif√©ricas e redundantes
# - Gera visualiza√ß√£o de grafo e relat√≥rio anal√≠tico autom√°tico (GPT)
# ===============================================================

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import networkx as nx
from openai import OpenAI

from utils.embeddings import sbert_embed, l2_normalize
from utils.text_utils import find_col, truncate
from utils.exportkit import export_table, export_zip_button, show_and_export_fig


# ---------------------------------------------------------------
# üöÄ Fun√ß√£o principal
# ---------------------------------------------------------------
def run_connectivity(df, scope_key, client=None):
    st.header("üåê Mapa de Conectividade Curricular (Rede de Impacto)")
    st.caption(
        """
        Analisa o **grau de conex√£o sem√¢ntica entre as Unidades Curriculares (UCs)**, identificando
        disciplinas **estruturantes**, **intermedi√°rias** e **perif√©ricas** dentro da matriz curricular.
        Baseia-se em embeddings SBERT e m√©tricas de rede.
        """
    )

    # -----------------------------------------------------------
    # üìÇ Localiza colunas principais
    # -----------------------------------------------------------
    col_text = (
        find_col(df, "Ementa")
        or find_col(df, "Descri√ß√£o")
        or find_col(df, "Objetos de conhecimento")
    )
    if not col_text:
        st.error("Coluna 'Ementa', 'Descri√ß√£o' ou 'Objetos de conhecimento' n√£o encontrada.")
        return

    col_uc = find_col(df, "Nome da UC")
    if not col_uc:
        st.error("Coluna 'Nome da UC' n√£o encontrada.")
        return

    df_valid = df[[col_uc, col_text]].dropna().rename(columns={col_uc: "UC", col_text: "Texto"})
    if df_valid.empty:
        st.warning("Nenhuma UC com texto preenchido.")
        return

    max_uc = st.slider("Quantidade de UCs para an√°lise", 4, min(50, len(df_valid)), min(20, len(df_valid)), 1)
    df_valid = df_valid.head(max_uc)

    # -----------------------------------------------------------
    # üß† Embeddings e matriz de similaridade
    # -----------------------------------------------------------
    with st.spinner("üß† Calculando embeddings SBERT..."):
        textos = df_valid["Texto"].astype(str).tolist()
        emb = l2_normalize(sbert_embed(textos))
        sims = np.dot(emb, emb.T)

    df_sim = pd.DataFrame(sims, index=df_valid["UC"], columns=df_valid["UC"])
    export_table(scope_key, df_sim, "matriz_similaridade", "Matriz de Similaridade entre UCs")

    st.markdown("### üîç Mapa de Similaridade Sem√¢ntica")
    fig, ax = plt.subplots(figsize=(7, 5))
    sns.heatmap(df_sim, cmap="crest", linewidths=0.5)
    ax.set_title("Matriz de Similaridade entre UCs (SBERT)", fontsize=12)
    st.pyplot(fig, use_container_width=True)
    show_and_export_fig(scope_key, fig, "mapa_similaridade_semantica")

    # -----------------------------------------------------------
    # üï∏Ô∏è Cria√ß√£o do grafo de conectividade
    # -----------------------------------------------------------
    st.markdown("### üï∏Ô∏è Rede de Impacto Curricular")
    threshold = st.slider("Limite de conex√£o (similaridade m√≠nima)", 0.5, 0.95, 0.75, 0.05)

    G = nx.Graph()
    for i, uc_a in enumerate(df_valid["UC"]):
        for j, uc_b in enumerate(df_valid["UC"]):
            if i < j and sims[i, j] >= threshold:
                G.add_edge(uc_a, uc_b, weight=sims[i, j])

    if G.number_of_edges() == 0:
        st.warning("Nenhuma conex√£o encontrada com o limite selecionado. Reduza o threshold.")
        return

    # -----------------------------------------------------------
    # üìä M√©tricas de centralidade
    # -----------------------------------------------------------
    centralidade_grau = nx.degree_centrality(G)
    centralidade_inter = nx.betweenness_centrality(G)
    densidade = nx.density(G)

    df_centralidade = pd.DataFrame({
        "UC": list(G.nodes),
        "Centralidade Grau": [centralidade_grau[n] for n in G.nodes],
        "Centralidade Intermedia√ß√£o": [centralidade_inter[n] for n in G.nodes],
    }).sort_values("Centralidade Grau", ascending=False)

    st.markdown("### üìà Disciplinas Estruturantes (Maior Centralidade)")
    st.dataframe(df_centralidade, use_container_width=True)
    export_table(scope_key, df_centralidade, "centralidade_uc", "Centralidade das UCs na Rede de Impacto")

    # -----------------------------------------------------------
    # üé® Visualiza√ß√£o do grafo
    # -----------------------------------------------------------
    st.markdown("### üé® Visualiza√ß√£o da Rede")
    pos = nx.spring_layout(G, seed=42, k=0.6)
    fig, ax = plt.subplots(figsize=(10, 7))
    nx.draw_networkx_nodes(G, pos, node_size=800, node_color="#90CAF9", edgecolors="#1565C0")
    nx.draw_networkx_edges(G, pos, width=1.8, alpha=0.7, edge_color="#42A5F5")
    nx.draw_networkx_labels(G, pos, font_size=8)
    plt.title("Mapa de Conectividade Curricular", fontsize=13, fontweight="bold")
    plt.axis("off")
    st.pyplot(fig, use_container_width=True)
    show_and_export_fig(scope_key, fig, "grafo_conectividade_curricular")

    # -----------------------------------------------------------
    # üß† An√°lise autom√°tica via GPT (opcional)
    # -----------------------------------------------------------
    if client is None:
        api_key = st.session_state.get("global_api_key", "")
        if api_key:
            client = OpenAI(api_key=api_key)

    if client is not None:
        top_nodes = df_centralidade.head(5)["UC"].tolist()
        bottom_nodes = df_centralidade.tail(5)["UC"].tolist()

        resumo = (
            f"Foram analisadas {len(G.nodes)} UCs, com densidade m√©dia de {densidade:.2f}. "
            f"As UCs mais conectadas (estruturantes) s√£o: {', '.join(top_nodes)}. "
            f"As menos conectadas (perif√©ricas) s√£o: {', '.join(bottom_nodes)}."
        )

        prompt = (
            "Voc√™ √© um avaliador curricular. Analise o resumo abaixo e produza um relat√≥rio curto e t√©cnico, "
            "com foco em **pontos fortes**, **fragilidades** e **recomenda√ß√µes pr√°ticas** para melhoria da "
            "estrutura curricular com base na rede de conectividade.\n\n"
            f"{resumo}"
        )

        try:
            with st.spinner("üìÑ Gerando relat√≥rio anal√≠tico via GPT..."):
                resp = client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.2,
                )
            analise = resp.choices[0].message.content.strip()
            st.markdown("### üßæ Relat√≥rio Anal√≠tico da Estrutura Curricular")
            st.info(analise)
        except Exception as e:
            st.error(f"‚ùå Erro ao gerar relat√≥rio anal√≠tico via GPT: {e}")

    # -----------------------------------------------------------
    # üß≠ Interpreta√ß√£o e aplica√ß√£o
    # -----------------------------------------------------------
    st.markdown("---")
    st.markdown(
        """
        ## üß≠ Como interpretar os resultados
        - **Alta centralidade de grau:** UC muito conectada ‚Üí conte√∫do fundamental, amplamente relacionado.  
        - **Alta intermedia√ß√£o:** UC que atua como ponte entre √°reas ‚Üí interdisciplinar.  
        - **Baixa centralidade:** UC isolada ou muito espec√≠fica ‚Üí pode indicar especializa√ß√£o ou desconex√£o tem√°tica.  
        - **Alta densidade da rede:** curso coeso e bem articulado.  
        - **Baixa densidade:** curso fragmentado, com poss√≠veis lacunas entre √°reas.  

        ### üß© Aplica√ß√µes pr√°ticas
        - Identificar **disciplinas estruturantes** (n√∫cleo formativo).  
        - Detectar **redund√¢ncias e sobreposi√ß√£o** tem√°tica.  
        - Mapear **√°reas que necessitam maior integra√ß√£o**.  
        - Apoiar revis√µes de **matriz curricular e PPC** com evid√™ncias gr√°ficas.
        """
    )

    export_zip_button(scope_key)
