# ===============================================================
# üìà EmentaLabv2 ‚Äî An√°lise Longitudinal (v1.0)
# ===============================================================
# - Analisa evolu√ß√£o sem√¢ntica de ementas ao longo do tempo
# - Mede mudan√ßas no conte√∫do (semelhan√ßa SBERT)
# - Detecta UCs com maior altera√ß√£o entre vers√µes
# - Gera gr√°ficos e relat√≥rio interpretativo autom√°tico (GPT)
# ===============================================================

import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from openai import OpenAI

from utils.text_utils import find_col, truncate
from utils.embeddings import sbert_embed, l2_normalize
from utils.exportkit import export_table, export_zip_button


# ---------------------------------------------------------------
# üöÄ Fun√ß√£o principal
# ---------------------------------------------------------------
def run_longitudinal(df, scope_key, client=None):
    st.header("üìà An√°lise Longitudinal")
    st.caption(
        "Avalia a **evolu√ß√£o sem√¢ntica e textual** das ementas ou descri√ß√µes das UCs ao longo do tempo, "
        "identificando mudan√ßas, estabilidade conceitual e poss√≠veis rupturas entre vers√µes curriculares."
    )

    # -----------------------------------------------------------
    # üß± Identifica√ß√£o de colunas
    # -----------------------------------------------------------
    col_text = (
        find_col(df, "Ementa")
        or find_col(df, "Descri√ß√£o")
        or find_col(df, "Objetos de conhecimento")
    )
    col_uc = find_col(df, "Nome da UC")
    col_periodo = find_col(df, "Per√≠odo") or find_col(df, "Ano") or find_col(df, "Vers√£o")

    if not (col_text and col_uc and col_periodo):
        st.error("√â necess√°rio conter colunas 'Nome da UC', 'Ementa' e 'Per√≠odo/Ano/Vers√£o' para esta an√°lise.")
        return

    df_valid = df[[col_uc, col_text, col_periodo]].dropna().rename(columns={
        col_uc: "UC",
        col_text: "Texto",
        col_periodo: "Periodo"
    })

    if df_valid.empty:
        st.warning("Nenhuma UC com informa√ß√µes v√°lidas para an√°lise longitudinal.")
        return

    # Normaliza per√≠odos (garantindo ordem)
    df_valid["Periodo"] = df_valid["Periodo"].astype(str).str.strip()
    periodos_unicos = sorted(df_valid["Periodo"].unique().tolist())
    st.info(f"Per√≠odos detectados: {', '.join(periodos_unicos)}")

    # -----------------------------------------------------------
    # üìä Sele√ß√£o de UCs e per√≠odos
    # -----------------------------------------------------------
    uc_list = sorted(df_valid["UC"].unique().tolist())
    uc_sel = st.selectbox("Selecione uma UC para an√°lise longitudinal:", uc_list)

    subset = df_valid[df_valid["UC"] == uc_sel].sort_values("Periodo")
    if len(subset) < 2:
        st.warning("√â necess√°rio que a UC tenha pelo menos duas vers√µes (em per√≠odos diferentes).")
        return

    # -----------------------------------------------------------
    # üß† C√°lculo de similaridade sem√¢ntica entre vers√µes
    # -----------------------------------------------------------
    st.markdown("### üß† Evolu√ß√£o Sem√¢ntica das Vers√µes")
    textos = subset["Texto"].astype(str).tolist()
    emb = l2_normalize(sbert_embed(textos))
    sims = np.dot(emb, emb.T)

    df_sims = pd.DataFrame(sims, index=subset["Periodo"], columns=subset["Periodo"])
    st.dataframe(df_sims.style.format("{:.2f}"), use_container_width=True)
    export_table(scope_key, df_sims, "similaridade_longitudinal", f"Similaridade entre vers√µes da UC {uc_sel}")

    # -----------------------------------------------------------
    # üìâ Visualiza√ß√£o ‚Äî Linha temporal
    # -----------------------------------------------------------
    st.markdown("### üìâ Linha de Similaridade Longitudinal")
    valores = []
    periodos = subset["Periodo"].tolist()
    for i in range(len(periodos) - 1):
        valores.append({
            "Compara√ß√£o": f"{periodos[i]} ‚Üí {periodos[i+1]}",
            "Similaridade": float(sims[i, i+1])
        })

    df_line = pd.DataFrame(valores)
    fig, ax = plt.subplots(figsize=(6, 3))
    sns.lineplot(data=df_line, x="Compara√ß√£o", y="Similaridade", marker="o", color="#1976D2", ax=ax)
    ax.set_ylim(0, 1)
    ax.set_title(f"Evolu√ß√£o de Similaridade ‚Äî {uc_sel}")
    ax.set_ylabel("Similaridade Sem√¢ntica (0‚Äì1)")
    st.pyplot(fig, use_container_width=True)

    # -----------------------------------------------------------
    # ‚ö†Ô∏è Identifica√ß√£o de mudan√ßas relevantes
    # -----------------------------------------------------------
    df_line["Mudan√ßa"] = df_line["Similaridade"].apply(
        lambda x: "Ruptura significativa" if x < 0.60 else "Mudan√ßa moderada" if x < 0.80 else "Estabilidade"
    )

    st.markdown("### ‚ö†Ô∏è Detec√ß√£o de Mudan√ßas")
    st.dataframe(df_line, use_container_width=True, hide_index=True)
    export_table(scope_key, df_line, "mudancas_longitudinais", f"Mudan√ßas na UC {uc_sel}")

    rupturas = df_line[df_line["Mudan√ßa"] != "Estabilidade"]

    # -----------------------------------------------------------
    # üßæ Relat√≥rio anal√≠tico autom√°tico (GPT)
    # -----------------------------------------------------------
    if client is None:
        api_key = st.session_state.get("global_api_key", "")
        if api_key:
            client = OpenAI(api_key=api_key)

    if client is not None:
        resumo = (
            f"UC analisada: {uc_sel}\n"
            f"Per√≠odos: {', '.join(periodos)}\n"
            f"Similaridades m√©dias: {df_line['Similaridade'].mean():.2f}\n"
            f"Rupturas detectadas: {len(rupturas)}\n"
        )

        prompt_relatorio = (
            "Voc√™ √© um especialista em an√°lise curricular. "
            "Com base nas similaridades entre vers√µes da UC a seguir, produza um **relat√≥rio breve, objetivo e t√©cnico**, "
            "indicando se a evolu√ß√£o da ementa demonstra **consist√™ncia, evolu√ß√£o ou ruptura tem√°tica**, "
            "e sugerindo a√ß√µes de melhoria se necess√°rio.\n\n"
            f"{resumo}"
        )

        try:
            with st.spinner("üìÑ Gerando relat√≥rio anal√≠tico via GPT..."):
                resp = client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=[{"role": "user", "content": prompt_relatorio}],
                    temperature=0.2,
                )
            analise_gpt = resp.choices[0].message.content.strip()
            st.markdown("### üßæ Relat√≥rio Anal√≠tico (Gerado pelo GPT)")
            st.info(analise_gpt)
        except Exception as e:
            st.error(f"‚ùå Erro ao gerar relat√≥rio GPT: {e}")

    # -----------------------------------------------------------
    # üß≠ Interpreta√ß√£o
    # -----------------------------------------------------------
    st.markdown("---")
    st.markdown(
        """
        ## üß≠ Como interpretar os resultados
        - **Similaridade ‚â• 0.85:** estabilidade conceitual ‚Äî a UC mant√©m coer√™ncia entre vers√µes.  
        - **0.60 ‚â§ Similaridade < 0.85:** atualiza√ß√£o moderada ‚Äî ajustes textuais e tem√°ticos naturais.  
        - **Similaridade < 0.60:** ruptura tem√°tica ‚Äî revis√£o substancial no conte√∫do.  

        ### üß© Aplica√ß√µes pr√°ticas
        - Detectar **mudan√ßas de foco curricular** ou **reformula√ß√µes significativas**.  
        - Garantir **continuidade evolutiva** nas revis√µes de PPC.  
        - Identificar **gaps de coer√™ncia longitudinal** entre vers√µes sucessivas da mesma UC.  
        """
    )

    export_zip_button(scope_key)
