# ===============================================================
# üßæ EmentaLabv2 ‚Äî Relat√≥rio Consultivo Integrado (v9.1)
# ===============================================================
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from openai import OpenAI
from utils.exportkit import export_zip_button, export_table, get_docx_bytes
from utils.text_utils import find_col
import io


# ---------------------------------------------------------------
# 1. Fun√ß√£o auxiliar ‚Äî gr√°ficos de apoio
# ---------------------------------------------------------------
def _plot_bloom_distribution(df, col_bloom: str):
    """Gr√°fico simples de distribui√ß√£o dos n√≠veis Bloom."""
    if col_bloom not in df.columns:
        st.warning("Coluna de n√≠veis Bloom n√£o encontrada.")
        return
    fig, ax = plt.subplots(figsize=(6, 4))
    sns.countplot(x=col_bloom, data=df, order=df[col_bloom].value_counts().index, palette="viridis", ax=ax)
    ax.set_title("Distribui√ß√£o dos N√≠veis Bloom nas UCs")
    ax.set_xlabel("N√≠vel Cognitivo")
    ax.set_ylabel("Quantidade de UCs")
    st.pyplot(fig, use_container_width=True)


def _plot_sentiment_bar(df, col_sent: str):
    """Gr√°fico de barras de sentimento das ementas."""
    if col_sent not in df.columns:
        st.warning("Coluna de sentimento n√£o encontrada.")
        return
    fig, ax = plt.subplots(figsize=(6, 4))
    sns.histplot(df[col_sent], bins=10, kde=True, color="#3b5bdb", ax=ax)
    ax.set_title("Distribui√ß√£o de Sentimento (Clareza Lingu√≠stica)")
    ax.set_xlabel("Polaridade (‚àí1 a +1)")
    ax.set_ylabel("Frequ√™ncia")
    st.pyplot(fig, use_container_width=True)


# ---------------------------------------------------------------
# 2. Fun√ß√£o principal
# ---------------------------------------------------------------
def run_consultive(df: pd.DataFrame, scope_key: str):
    """
    Gera um relat√≥rio consultivo consolidando an√°lises de:
    - Cobertura Curricular (Compet√™ncias DCN √ó UCs)
    - Curva Bloom Progressiva
    - Converg√™ncia Tem√°tica
    - Depend√™ncia Curricular
    - Clareza e Sentimento
    - An√°lise Longitudinal
    """

    st.header("üßæ Relat√≥rio Consultivo Integrado ‚Äî EmentaLabv2")
    st.caption("S√≠ntese anal√≠tica consolidada das dimens√µes curriculares avaliadas pelo EmentaLabv2.")

    # -----------------------------------------------------------
    # Par√¢metros
    # -----------------------------------------------------------
    api_key = st.text_input("üîë OpenAI API Key (opcional para gerar texto autom√°tico)", type="password")
    gerar_texto = st.checkbox("üß† Gerar an√°lise autom√°tica via GPT", value=False)
    if gerar_texto and not api_key:
        st.warning("Para gerar o texto autom√°tico, insira a API Key acima.")

    st.markdown("---")
    st.subheader("üìä Indicadores de Cobertura e Complexidade")

    # -----------------------------------------------------------
    # 1. Cobertura Curricular (compet√™ncias)
    # -----------------------------------------------------------
    col_comp = find_col(df, "Compet√™ncia") or find_col(df, "Compet√™ncias do Perfil do Egresso")
    if col_comp:
        st.markdown("### üéØ Cobertura de Compet√™ncias")
        df_cov = df[["Nome da UC", col_comp]].dropna()
        st.write(f"**{len(df_cov)}** UCs possuem compet√™ncias explicitadas.")
        export_table(scope_key, df_cov, "cobertura_competencias", "Cobertura de Compet√™ncias")
    else:
        st.info("Nenhuma coluna de compet√™ncias encontrada no dataset.")

    # -----------------------------------------------------------
    # 2. Curva Bloom
    # -----------------------------------------------------------
    col_bloom = find_col(df, "N√≠vel Bloom") or find_col(df, "Bloom")
    if col_bloom:
        _plot_bloom_distribution(df, col_bloom)
        export_table(scope_key, df[["Nome da UC", col_bloom]], "curva_bloom", "Curva Bloom")
    else:
        st.info("N√£o h√° coluna de n√≠veis Bloom gerados.")

    # -----------------------------------------------------------
    # 3. Clareza e Sentimento
    # -----------------------------------------------------------
    st.markdown("### üí¨ Clareza e Sentimento das Ementas")
    col_sent = find_col(df, "sentimento") or find_col(df, "polaridade")
    if col_sent:
        _plot_sentiment_bar(df, col_sent)
        mean_sent = df[col_sent].mean()
        st.metric("M√©dia geral de polaridade", f"{mean_sent:.3f}")
        export_table(scope_key, df[["Nome da UC", col_sent]], "sentimento", "Clareza e Sentimento")
    else:
        st.info("Nenhuma an√°lise de sentimento encontrada no dataset.")

    # -----------------------------------------------------------
    # 4. Converg√™ncia Tem√°tica (clusters)
    # -----------------------------------------------------------
    st.markdown("### üß© Converg√™ncia Tem√°tica (Clusters)")
    if "Cluster" in df.columns:
        st.write(f"Total de **{df['Cluster'].nunique()}** agrupamentos tem√°ticos detectados.")
        fig, ax = plt.subplots(figsize=(6, 4))
        sns.countplot(x="Cluster", data=df, palette="crest", ax=ax)
        ax.set_title("Distribui√ß√£o de UCs por Cluster Tem√°tico")
        ax.set_xlabel("Cluster")
        ax.set_ylabel("N√∫mero de UCs")
        st.pyplot(fig)
        export_table(scope_key, df[["Nome da UC", "Cluster"]], "clusters_tematica", "Clusters Tem√°ticos")
    else:
        st.info("Nenhuma coluna de cluster encontrada.")

    # -----------------------------------------------------------
    # 5. Depend√™ncia Curricular (pr√©-requisitos)
    # -----------------------------------------------------------
    st.markdown("### üîó Rela√ß√µes de Depend√™ncia Curricular")
    if {"Pr√©-requisito", "UC Dependente"}.issubset(df.columns):
        rel = df[["Pr√©-requisito", "UC Dependente"]].drop_duplicates()
        st.write(f"Foram identificadas **{len(rel)}** rela√ß√µes de pr√©-requisito.")
        export_table(scope_key, rel, "dependencias_curriculares", "Depend√™ncias Curriculares")
    else:
        st.info("Nenhuma rela√ß√£o de pr√©-requisito detectada neste dataset.")

    # -----------------------------------------------------------
    # 6. An√°lise Longitudinal
    # -----------------------------------------------------------
    st.markdown("### ‚è≥ An√°lise Longitudinal de Revis√µes")
    col_rev = find_col(df, "vers√£o") or find_col(df, "√∫ltima atualiza√ß√£o") or find_col(df, "ano")
    if col_rev:
        anos = df[col_rev].dropna().astype(str)
        if not anos.empty:
            freq = anos.value_counts().sort_index()
            fig, ax = plt.subplots(figsize=(6, 4))
            freq.plot(kind="bar", color="#748ffc", ax=ax)
            ax.set_title("Distribui√ß√£o de UCs por Ano/Vers√£o")
            ax.set_xlabel("Ano / Vers√£o")
            ax.set_ylabel("N√∫mero de UCs")
            st.pyplot(fig)
            export_table(scope_key, df[["Nome da UC", col_rev]], "longitudinal", "An√°lise Longitudinal")
    else:
        st.info("Nenhum campo temporal identificado (ano, vers√£o ou atualiza√ß√£o).")

    # -----------------------------------------------------------
    # 7. S√≠ntese autom√°tica (GPT opcional)
    # -----------------------------------------------------------
    if gerar_texto and api_key:
        st.markdown("---")
        st.subheader("üß† S√≠ntese Autom√°tica via GPT")

        client = OpenAI(api_key=api_key)
        prompt = (
            "Gere um resumo consultivo de um relat√≥rio curricular, considerando as dimens√µes:\n"
            "- Cobertura de compet√™ncias\n"
            "- Curva Bloom (n√≠veis cognitivos)\n"
            "- Converg√™ncia tem√°tica (clusters)\n"
            "- Depend√™ncias curriculares\n"
            "- Clareza e sentimento lingu√≠stico\n"
            "- An√°lise longitudinal\n\n"
            "Descreva pontos fortes, lacunas e recomenda√ß√µes, em um tom profissional e institucional."
        )

        with st.spinner("Gerando texto anal√≠tico via GPT..."):
            resp = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.3,
            )
        texto_final = resp.choices[0].message.content.strip()

        st.text_area("üìÑ S√≠ntese Autom√°tica", value=texto_final, height=300)
        st.download_button(
            "üíæ Baixar S√≠ntese (TXT)",
            data=texto_final,
            file_name="sintese_consultiva.txt",
            mime="text/plain",
        )

        # Exporta vers√£o DOCX
        docx_bytes = get_docx_bytes(texto_final)
        st.download_button(
            "üìÑ Baixar Relat√≥rio (DOCX)",
            data=docx_bytes,
            file_name="relatorio_consultivo.docx",
            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        )

    # -----------------------------------------------------------
    # Finaliza√ß√£o
    # -----------------------------------------------------------
    st.markdown("---")
    export_zip_button(scope_key)
    st.success("‚úÖ Relat√≥rio consultivo gerado com sucesso!")
