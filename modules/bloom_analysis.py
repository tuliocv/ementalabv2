# ===============================================================
# üß† EmentaLabv2 ‚Äî Mapa de Bloom (Heur√≠stica + GPT Refinement)
# ===============================================================
import streamlit as st
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
from openai import OpenAI
from utils.text_utils import find_col
from utils.bloom_helpers import calculate_bloom_level
from utils.exportkit import export_table, show_and_export_fig, export_zip_button

# ---------------------------------------------------------------
# Fun√ß√£o principal
# ---------------------------------------------------------------
def run_bloom(df, scope_key):
    # -----------------------------------------------------------
    # üè∑Ô∏è T√≠tulo e descri√ß√£o
    # -----------------------------------------------------------
    st.header("üß† Mapa de Bloom ‚Äî Heur√≠stica + GPT")
    st.caption(
        """
        Este m√≥dulo analisa os **n√≠veis cognitivos da Taxonomia de Bloom** expressos nos
        *Objetivos de Aprendizagem* das Unidades Curriculares (UCs).

        A classifica√ß√£o ocorre em duas etapas:
        1Ô∏è‚É£ **Heur√≠stica autom√°tica**, baseada em verbos t√≠picos associados aos n√≠veis de Bloom;  
        2Ô∏è‚É£ **Refinamento GPT (opcional)**, que interpreta semanticamente o texto para ajustar o n√≠vel cognitivo.
        """
    )

    # -----------------------------------------------------------
    # üìÇ Verifica√ß√£o da coluna base
    # -----------------------------------------------------------
    col_obj = find_col(df, "Objetivo de aprendizagem")
    if not col_obj:
        st.error("Coluna 'Objetivo de aprendizagem' n√£o encontrada.")
        st.stop()

    # -----------------------------------------------------------
    # üß© Etapa 1 ‚Äî An√°lise Heur√≠stica
    # -----------------------------------------------------------
    st.subheader("üìä Distribui√ß√£o Heur√≠stica dos N√≠veis de Bloom")

    df_out = calculate_bloom_level(df, col_obj)

    freq = df_out["N√≠vel Bloom Predominante"].value_counts(normalize=True).mul(100).round(1)
    fig, ax = plt.subplots(figsize=(8, 4))
    sns.barplot(x=freq.index, y=freq.values, ax=ax, palette="crest")
    ax.set_ylabel("% de UCs")
    ax.set_xlabel("N√≠vel de Bloom")
    ax.set_title("Distribui√ß√£o Heur√≠stica de Bloom (verbos e express√µes)")
    show_and_export_fig(scope_key, fig, "bloom_distribuicao_heuristica")

    st.dataframe(df_out, use_container_width=True)
    export_table(scope_key, df_out, "bloom_tabela_heuristica", "Bloom Heur√≠stico")

    # -----------------------------------------------------------
    # üß† Etapa 2 ‚Äî Refinamento GPT (opcional)
    # -----------------------------------------------------------
    st.markdown("---")
    st.subheader("ü§ñ Refinamento Inteligente com GPT (opcional)")
    api_key = st.text_input("üîë OpenAI API Key (opcional para refinamento GPT)", type="password")

    if api_key:
        client = OpenAI(api_key=api_key)
        st.info("O modelo GPT analisar√° cada objetivo e sugerir√° um n√≠vel de Bloom mais preciso.")

        # ‚úÖ Corrigido: merge entre df e df_out para garantir a coluna de texto original
        subset = df[["Nome da UC", col_obj]].merge(
            df_out[["Nome da UC", "N√≠vel Bloom Predominante"]],
            on="Nome da UC",
            how="inner"
        ).dropna(subset=[col_obj])

        refined_levels = []
        total = len(subset)

        # Spinner tempor√°rio (oculta ap√≥s o processamento)
        with st.spinner("üß† Analisando objetivos com GPT..."):
            progress_bar = st.progress(0)

            for i in range(len(subset)):
                objetivo_texto = subset.iloc[i][col_obj]
                nivel_heuristico = subset.iloc[i]["N√≠vel Bloom Predominante"]

                prompt = f"""
                Voc√™ √© um especialista em taxonomia de Bloom.
                Classifique o seguinte objetivo de aprendizagem no n√≠vel cognitivo mais adequado
                (Lembrar, Compreender, Aplicar, Analisar, Avaliar ou Criar)
                e indique o verbo principal usado.

                Objetivo: "{objetivo_texto}"
                Classifica√ß√£o heur√≠stica pr√©via: "{nivel_heuristico}"

                Responda em formato JSON:
                {{
                    "verbo": "...",
                    "nivel_bloom": "...",
                    "justificativa": "..."
                }}
                """

                try:
                    resp = client.chat.completions.create(
                        model="gpt-4o-mini",
                        messages=[{"role": "user", "content": prompt}],
                        temperature=0.0,
                    )
                    content = resp.choices[0].message.content.strip()
                    refined_levels.append(content)
                except Exception as e:
                    refined_levels.append(f'{{"erro": "{str(e)}"}}')

                progress_bar.progress((i + 1) / total)

        # -------------------------------------------------------
        # üìä Processamento da sa√≠da GPT
        # -------------------------------------------------------
        df_gpt = subset.copy()
        df_gpt["Resultado GPT"] = refined_levels

        # Convers√£o simplificada (regex de extra√ß√£o)
        df_gpt["Verbo GPT"] = df_gpt["Resultado GPT"].str.extract(r'"verbo"\s*:\s*"([^"]+)"')
        df_gpt["N√≠vel Bloom GPT"] = df_gpt["Resultado GPT"].str.extract(r'"nivel_bloom"\s*:\s*"([^"]+)"')
        df_gpt["Justificativa"] = df_gpt["Resultado GPT"].str.extract(r'"justificativa"\s*:\s*"([^"]+)"')

        # -------------------------------------------------------
        # üìä Comparativo Heur√≠stica √ó GPT
        # -------------------------------------------------------
        st.markdown("### üìà Comparativo Heur√≠stico √ó GPT")
        freq_gpt = df_gpt["N√≠vel Bloom GPT"].value_counts(normalize=True).mul(100).round(1)

        fig, ax = plt.subplots(1, 2, figsize=(12, 4))
        sns.barplot(x=freq.index, y=freq.values, ax=ax[0], palette="crest")
        ax[0].set_title("Distribui√ß√£o Heur√≠stica")
        ax[0].set_ylabel("% de UCs")
        ax[0].set_xlabel("N√≠vel de Bloom")

        sns.barplot(x=freq_gpt.index, y=freq_gpt.values, ax=ax[1], palette="rocket")
        ax[1].set_title("Distribui√ß√£o GPT")
        ax[1].set_ylabel("% de UCs")
        ax[1].set_xlabel("N√≠vel de Bloom (GPT)")

        st.pyplot(fig, use_container_width=True)
        show_and_export_fig(scope_key, fig, "bloom_comparativo_gpt")

        # -------------------------------------------------------
        # üìã Tabela detalhada e m√©tricas
        # -------------------------------------------------------
        st.markdown("### üìã Resultados Detalhados por UC")
        df_gpt["Concord√¢ncia"] = df_gpt.apply(
            lambda r: "‚úÖ" if str(r["N√≠vel Bloom GPT"]).strip().lower() == str(r["N√≠vel Bloom Predominante"]).strip().lower() else "‚ö†Ô∏è", axis=1
        )

        concord_rate = (df_gpt["Concord√¢ncia"] == "‚úÖ").mean() * 100
        st.metric("Taxa de Concord√¢ncia Heur√≠stica √ó GPT", f"{concord_rate:.1f}%")

        st.dataframe(
            df_gpt[
                ["Nome da UC", col_obj, "N√≠vel Bloom Predominante", "N√≠vel Bloom GPT", "Verbo GPT", "Concord√¢ncia", "Justificativa"]
            ],
            use_container_width=True,
        )

        export_table(scope_key, df_gpt, "bloom_refinamento_gpt", "Bloom GPT Refinado")
        export_zip_button(scope_key)

    else:
        st.info("Insira sua chave de API da OpenAI para ativar o refinamento GPT.")
        export_zip_button(scope_key)

    # -----------------------------------------------------------
    # üìò Interpreta√ß√£o e guia de leitura
    # -----------------------------------------------------------
    st.markdown("---")
    st.subheader("üìò Como interpretar os resultados")
    st.markdown(
        """
        **1Ô∏è‚É£ Interpreta√ß√£o dos n√≠veis Bloom:**
        - üß† *Lembrar*: recorda√ß√£o de informa√ß√µes e fatos b√°sicos.  
        - üí° *Compreender*: interpreta√ß√£o e explica√ß√£o de conceitos.  
        - üß© *Aplicar*: uso de m√©todos e conhecimentos em situa√ß√µes pr√°ticas.  
        - üîç *Analisar*: decomposi√ß√£o e identifica√ß√£o de rela√ß√µes.  
        - ‚öñÔ∏è *Avaliar*: julgamento cr√≠tico e argumenta√ß√£o de decis√µes.  
        - üé® *Criar*: s√≠ntese e produ√ß√£o de novas ideias ou artefatos.

        **2Ô∏è‚É£ Uso combinado Heur√≠stico + GPT:**
        - A heur√≠stica fornece uma **vis√£o quantitativa r√°pida** baseada em verbos.  
        - O GPT refina o contexto, considerando **significado sem√¢ntico e objetivo pedag√≥gico**.  
        - Diverg√™ncias indicam poss√≠veis **inconsist√™ncias na formula√ß√£o dos objetivos**.

        **3Ô∏è‚É£ Aplica√ß√µes pr√°ticas:**
        - Revisar a coer√™ncia entre os objetivos e os n√≠veis cognitivos esperados.  
        - Padronizar a linguagem pedag√≥gica entre cursos ou n√∫cleos.  
        - Subsidiar revis√µes de PPC e de planos de ensino, fortalecendo evid√™ncias de coer√™ncia curricular.
        """
    )
